#!/usr/bin/env bash
# Installs and configures unode server software
# ./install install-all myusername mysecretpassword
set -e
[[ -f /etc/os-release ]] && . /etc/os-release
if [[ "$NAME" == "Ubuntu" ]] && [[ "$VERSION_ID" == "20.04" ]]; then
  echo "I: Installing on $NAME $VERSION_ID."
else
  echo "E: Unsupported Operating System!"
  exit 1
fi
pghbaconf="/etc/postgresql/13/main/pg_hba.conf"
test_pgname=test_unode
pgname=unode
pgrest_authenticator_user=authenticator
pgrest_authenticator_pass=mysecretpassword
openrestydir=/etc/openresty


ssql(){
  sql=$1
  sudo -Hiu postgres psql -Atq -U postgres -d postgres -c "$sql"
  # sudosql "select current_user"
}


sql(){
  if [[ "$#" -lt 3 ]]; then
    echo "Usage: $0 <sql> <pguser> <pgpass>"
    exit 1
  fi
  sql=$3
  pguser=$2
  pgpass=$3
  sudo -Hiu postgres psql -Atq -U postgres -d $db_name -c "$sql"
  # sql "select current_user"
}


purge_all () {
  # apt purge '^pgadmin4.*'
  echo "Purging all"
}


prep_host () {
  apt-get update -y
  apt-get upgrade -y
  # echo "Purging all"
}


install-postgres () {
  if [[ "$#" -ne 2 ]]; then
    echo "Usage: $0 ${FUNCNAME} <pgadminuser> <pgadminpass>"
    exit 1
  fi
  pgadminuser=$1
  pgadminpass=$2
  echo "Installing postgres."
  sudo apt-get install curl ca-certificates gnupg
  curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
  sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
  sudo apt-get update -y
  sudo apt install -y postgresql-server-dev-13 postgresql-13
  sed -i 's/md5$/scram-sha-256/g' $pghbaconf
  cp files/confd-postgresql.conf /etc/postgresql/13/main/conf.d/postgresql.conf
  # echo "host    all             all             0.0.0.0/0            scram-sha-256" >>  $pghbaconf
  # echo "host    all             all             ::0/0            scram-sha-256" >>  $pghbaconf
  if ! [[ $(grep "host    all             all             all            scram-sha-256" /etc/postgresql/13/main/pg_hba.conf) ]]; then
    echo "host    all             all             all            scram-sha-256" >>  $pghbaconf
  fi
  systemctl restart postgresql
  systemctl is-active postgresql
  systemctl is-enabled postgresql
  ssql "DROP DATABASE IF EXISTS $pgname"
  
  ssql "DROP DATABASE IF EXISTS $test_pgname"
  ssql "DROP ROLE IF EXISTS $pgadminuser"
  ssql "CREATE ROLE $pgadminuser WITH LOGIN SUPERUSER PASSWORD '$pgadminpass'"
  ssql "CREATE DATABASE $test_pgname"
  ssql "CREATE DATABASE $pgname"
  ssql  "ALTER DATABASE $pgname OWNER TO $pgadminuser"
  
}


install-nginx () {
  if [[ "$#" -ne 2 ]]; then
    echo "Usage: $0 ${FUNCNAME} <pgadminuser> <pgadminpass>"
    exit 1
  fi
  pgadminuser=$1
  pgadminpass=$2
  echo "Installing postgres."
  sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt -subj "/C=US/ST=Utah/L=SLC/O=Example Corp/OU=Testing/CN=example.io"
  sudo apt install -y nginx nginx-extras luarocks gcc # optinal: lua-http
  sudo rm -f /etc/nginx/sites-enabled/default
  sudo luarocks PGSQL_INCDIR=/usr/include/postgresql/ install luasql-postgres  # no async event loop like pgmoon
  # https://leafo.net/guides/using-postgres-with-openresty.html
  sudo luarocks install https://luarocks.org/manifests/skylothar/lua-resty-jwt-0.1.11-0.rockspec
  cp files/default.conf /etc/nginx/conf.d/
  mkdir -p /etc/nginx/lua
  cat <<EOT >> /etc/nginx/lua/config.lua
local config = {}

config.test_pgname = "$test_pgname"
config.pgname = "$pgname"
config.pghost = "127.0.0.1"
config.pguser = "$pgadminuser"
config.pgpass = "$pgadminpass"
config.pgport = "5432"

return config
EOT
  cp files/health.lua /etc/nginx/lua/health.lua
  sudo systemctl restart nginx
  systemctl is-active nginx
  systemctl is-enabled nginx
}


install-openresty () {
  sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt -subj "/C=US/ST=Utah/L=SLC/O=Example Corp/OU=Testing/CN=example.io"
  sudo apt-get -y install --no-install-recommends wget gnupg ca-certificates
  wget -O - https://openresty.org/package/pubkey.gpg | sudo apt-key add -
  echo "deb http://openresty.org/package/ubuntu $(lsb_release -sc) main" \
    | sudo tee /etc/apt/sources.list.d/openresty.list
  sudo apt-get update
  sudo apt-get -y install openresty postgresql-server-dev-13 luarocks gcc || true
  sudo systemctl restart openresty 
  systemctl is-active openresty 
  sudo luarocks PGSQL_INCDIR=/usr/include/postgresql/ install luasql-postgres
  # sudo apt-get -y install --no-install-recommends openresty  # no openresty-opm and openresty-restydoc
  sudo opm install cdbattags/lua-resty-jwt xiangnanscu/lua-resty-query
  mkdir -p $openrestydir/lua
  mkdir -p $openrestydir/conf.d
  mv $openrestydir/nginx.conf $openrestydir/nginx.conf.o.bkp
  cp files/nginx.conf $openrestydir/nginx.conf
  cp files/default.conf $openrestydir/conf.d/
  cp files/health.lua $openrestydir/lua/health.lua
  mkdir -p /etc/nginx/lua
  cat <<EOT >> $openrestydir/lua/config.lua
local config = {}

config.test_pgname = "$test_pgname"
config.pgname = "$pgname"
config.pghost = "127.0.0.1"
config.pguser = "$pgadminuser"
config.pgpass = "$pgadminpass"
config.pgport = "5432"

return config
EOT
  sudo openresty -t
  sudo systemctl restart openresty 
  systemctl is-active openresty 
  systemctl is-enabled openresty 
}

install-pgadmin4 () {
  echo "Install pgadmin4-web"
  curl https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo apt-key add
  sudo sh -c 'echo "deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list && apt update'
  apt install -y pgadmin4-web
  sudo /usr/pgadmin4/bin/setup-web.sh
  echo "login via http://localhost/pgadmin4 with username and password you setup"
  systemctl restart apache2
  sed -i 's/Listen 80/Listen 44449/g' /etc/apache2/ports.conf
  sed -i 's/Listen 443/Listen 8443/g' /etc/apache2/ports.conf
  sed -i 's/<VirtualHost \*:80>/<VirtualHost *:44449>/g' /etc/apache2/sites-enabled/000-default.conf
  systemctl restart apache2
}


example_pgadmin4_slient_install() {
  if [[ ! -d "$PGADMIN_SETUP_EMAIL" ]]; then
    export PGADMIN_SETUP_EMAIL="${pg_admin_email}"
    export PGADMIN_SETUP_PASSWORD="${pg_admin_pwd}"
    echo 'export PGADMIN_SETUP_EMAIL="${pg_admin_email}"' >> ~/.bashrc
    echo 'export PGADMIN_SETUP_PASSWORD="${pg_admin_pwd}"' >> ~/.bashrc
  fi
  curl https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo apt-key add
  sh -c 'echo "deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list && apt update'
  apt install -y pgadmin4
  apt install -y pgadmin4-web
  sudo apt update
  # silently install the below --yes indicate auto install
  . /usr/pgadmin4/bin/setup-web.sh --yes
}


enumerate(){
  echo "Function name:  ${FUNCNAME}"
  echo "The number of positional parameter : $#"
  echo "All parameters or arguments passed to the function: '$@'"
  echo
}


install-pgbouncer(){
  if [[ "$#" -ne 1 ]]; then
    echo "Usage: $0 ${FUNCNAME} <pgadminuser>"
    exit 1
  fi
  
  sudo apt-get install -y pgbouncer
  mv /etc/pgbouncer/pgbouncer.ini /etc/pgbouncer/pgbouncer.ini.bkp || true
  cat <<EOT >> /etc/pgbouncer/pgbouncer.ini
[databases]
$pgname = dbname=$pgname host=127.0.0.1 port=5432
[users]
[pgbouncer]
logfile = /var/log/postgresql/pgbouncer.log
pidfile = /var/run/postgresql/pgbouncer.pid
listen_addr = *
listen_port = 44441
unix_socket_dir = /var/run/postgresql
auth_type = scram-sha-256
auth_file = /etc/pgbouncer/userlist.txt
admin_users = $1
EOT

  sudo -u postgres psql -Atq -U postgres -d postgres -c "SELECT concat('\"', usename, '\" \"', passwd, '\"') FROM pg_shadow" > /etc/pgbouncer/userlist.txt
  systemctl restart pgbouncer
}


install-all(){
  if [[ "$#" -ne 2 ]]; then
    echo "Usage: $0 ${FUNCNAME} <adminuser> <adminpass>"
    exit 1
  fi
  echo "Installing all packages."
  adminuser=$1
  adminpass=$2
  prep_host
  install-postgres "$adminuser" "$adminpass"
  install-pgbouncer "$adminuser"
  install-pgadmin4 "$adminuser" "$adminpass"
  # install-nginx "$adminuser" "$adminpass"
  install-openresty "$adminuser" "$adminpass"
  install-postgrest
}


run-tests(){
  echo "Running tests"
}


install-postgrest(){
  # Allow "tr" to process non-utf8 byte sequences
  export LC_CTYPE=C
  # read random bytes and keep only alphanumerics
  jwt_secret=$(< /dev/urandom tr -dc A-Za-z0-9 | head -c32)

  cat <<EOT >> /app/unode/postgrest/postgrest.conf 
db-uri = "postgres://$pgrest_authenticator_user:$pgrest_authenticator_pass@localhost:5432/unode"
db-schema = "api"
db-anon-role = "web_anon"
jwt-secret = "$jwt_secret"
EOT

  cat <<EOT >> /app/unode/postgrest/postgrest.conf 
[Unit]
Description=REST API for any Postgres database
After=postgresql.service

[Service]
ExecStart=/app/unode/postgrest/postgrest /app/unode/postgrest/postgrest.conf
ExecReload=/bin/kill -SIGUSR1 \$MAINPID

[Install]
WantedBy=multi-user.target
EOT

  mkdir -p /app/unode/bin
  mkdir -p /app/unode/conf
  curl -LO https://github.com/PostgREST/postgrest/releases/download/v7.0.1/postgrest-v7.0.1-linux-x64-static.tar.xz
  tar -xvf postgrest-v7.0.1-linux-x64-static.tar.xz -C /app/unode/postgrest 
  cp files/postgrest.service /etc/systemd/system/postgrest.service 
  # cp files/postgrest.conf /app/unode/postgrest/
  systemctl enable postgrest
  systemctl daemon-reload
  systemctl start postgrest
}


install-app() {
  appbin=/app/unode/bin
  mkdir -p $appbin 
  cp files/fw-update $appbin/
  # chown www-data -R /app 
  cp files/unode-sudoers  /etc/sudoers.d/ 
  cp files/fw.lua /etc/nginx/lua/
  systemctl restart nginx
  ufw allow 22,80,443/tcp  # 44441
  ufw enabled
}


main() {
  if [[ "$#" -lt 1 ]]; then
    echo "Usage: $0 <function>"
    return
  fi

  if [ "$1" == "install-all" ]; then
    install-all "$2" "$3"
  elif [ "$1" == "install-openresty" ]; then
    install-openresty "$2" "$3"
  elif [ "$1" == "run-tests" ]; then
    run-tests
  else
    echo "E: Unsupported function!"
    exit 1
  fi
}


main $@
